(()=>{"use strict";var e={625:(e,t,n)=>{e.exports=n.p+"d7a028ba66350ec29c54.jpg"},741:(e,t,n)=>{e.exports=n.p+"0ef95b699eb9b058a0d0.jpg"},478:(e,t,n)=>{e.exports=n.p+"566fbb83cfb32349e01d.jpg"},383:(e,t,n)=>{e.exports=n.p+"0a068355c25335ad73e6.jpg"},242:(e,t,n)=>{e.exports=n.p+"67b98bd2e15760bf5737.jpg"},681:(e,t,n)=>{e.exports=n.p+"b25a96a15297fdd8a8b4.jpg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{n(242),n(681),n(478),n(383),n(625),n(741);var e={formSelector:".popup__container",fieldsetSelector:".popup__form",inputSelector:".popup__form-item",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_inactive",errorClass:"popup__form-item_error"},t=document.querySelector('.popup[data-type="account"]'),r=document.querySelector(".profile__edit-button"),o=document.forms.account,i=o.elements.username,a=o.elements.description,c=document.querySelector('.popup[data-type="place"]'),u=document.querySelector(".profile__add-button"),s=document.forms.place,l=(s.elements.title,s.elements.link,document.querySelector('.popup[data-type="confirm-delete"]')),f=document.forms.avatar,p=document.querySelector('.popup[data-type="avatar"]'),h=document.querySelector(".profile__avatar"),d={name:document.querySelector(".profile__name"),about:document.querySelector(".profile__description"),avatar:document.querySelector(".profile__avatar-image")},y=document.querySelector('.popup[data-type="lightbox"]'),_=document.querySelector(".cards__items");function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var b=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_fetchButCatch",value:function(e,t){return fetch(e,t).then((function(e){return e.ok?e.json():Promise.reject(new Error("Ошибка: ".concat(res.status)))}))}},{key:"getUser",value:function(){return this._fetchButCatch("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}},{key:"setUser",value:function(e){return this._fetchButCatch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})})}},{key:"setAvatar",value:function(e){return this._fetchButCatch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}},{key:"uploadCard",value:function(e){return this._fetchButCatch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})})}},{key:"getCards",value:function(){return this._fetchButCatch("".concat(this._baseUrl,"/cards"),{headers:this._headers})}},{key:"deleteCard",value:function(e){return this._fetchButCatch("".concat(this._baseUrl,"/cards/").concat(e._id),{method:"DELETE",headers:this._headers})}},{key:"setLike",value:function(e){return this._fetchButCatch("".concat(this._baseUrl,"/cards/likes/").concat(e._id),{method:"PUT",headers:this._headers})}},{key:"removeLike",value:function(e){return this._fetchButCatch("".concat(this._baseUrl,"/cards/likes/").concat(e._id),{method:"DELETE",headers:this._headers})}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var k=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._fieldsetSelector=t.fieldsetSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._errorClass=t.errorClass,this._form=n,this._submitBtn=this._form.querySelector(this._submitButtonSelector),this._inputList=Array.from(this._form.querySelectorAll(t.inputSelector))}var t,n;return t=e,(n=[{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e,e.validationMessage):this._showInputError(e,e.validationMessage)}},{key:"_showInputError",value:function(e,t){this._form.querySelector("#".concat(e.id,"-error")).textContent=t,e.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){this._form.querySelector("#".concat(e.id,"-error")).textContent="",e.classList.remove(this._errorClass)}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_enableBtn",value:function(){this._submitBtn.classList.remove(this._inactiveButtonClass),this._submitBtn.disabled=!1}},{key:"_disableBtn",value:function(){this._submitBtn.classList.add(this._inactiveButtonClass),this._submitBtn.disabled=!0}},{key:"_toggleButtonState",value:function(e){this._hasInvalidInput(e)?this._disableBtn():this._enableBtn()}},{key:"_setEventListeners",value:function(){var e=this;this._toggleButtonState(this._inputList),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState(e._inputList)}))}))}},{key:"removeErrors",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t)}))}},{key:"enableValidation",value:function(){var e=this;this._form.addEventListener("submit",(function(t){t.preventDefault(),e._disableBtn()})),this._setEventListeners()}}])&&m(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var E=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._cardTitle=t.data.name,this._cardImage=t.data.link,this.cardLikes=t.data.likes,this._cardOwner=t.data.owner,this._templateSelector=n,this._handleCardClick=t.handleCardClick,this._handleLikeClick=t.handleLikeClick,this._handleDeleteClick=t.handleDeleteIconClick,this._userID=t.myId}var t,n;return t=e,(n=[{key:"_cloneTemplate",value:function(){this._cardElement=document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this._likeButton.addEventListener("click",this._handleLikeClick),this._deleteButton.addEventListener("click",this._handleDeleteClick),this._cardImageElement.addEventListener("click",(function(){e._handleCardClick({name:e._cardTitle,link:e._cardImage})}))}},{key:"generateCard",value:function(){return this._cloneTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardTitleElement=this._cardElement.querySelector(".card__title"),this._cardLikesElement=this._cardElement.querySelector(".card__likes"),this._cardImageElement.src=this._cardImage,this._cardTitleElement.textContent=this._cardTitle,this._cardImageElement.alt=this._cardTitle,this.renderAmountOfLikes(this.cardLikes.length),this.youLiked()&&this.toggleLikeBtnState(),this._setEventListeners(),this._checkOwner(),this._yourCard||this._deleteButton.remove(),this._cardElement}},{key:"renderAmountOfLikes",value:function(e){this._cardLikesElement.textContent=e}},{key:"youLiked",value:function(){var e=this;return this.cardLikes.some((function(t){return t._id===e._userID}))}},{key:"toggleLikeBtnState",value:function(){this._likeButton.classList.toggle("card__like-button_active")}},{key:"removeCard",value:function(){this._cardElement.remove(),this._cardElement=null}},{key:"_checkOwner",value:function(){this._cardOwner._id===this._userID?this._yourCard=!0:this._yourCard=!1}}])&&g(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=t.renderer,this._containerElement=t.containerElement}var t,n;return t=e,(n=[{key:"render",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(e){this._containerElement.prepend(e)}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._openedSelector="popup_opened",this._handleEscCloseWrapper=this._handleEscClose.bind(this),this._handleMainCloseWrapper=this._handleMainClose.bind(this)}var t,n;return t=e,(n=[{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleMainClose",value:function(e){(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&this.close()}},{key:"open",value:function(){this._popup.classList.add(this._openedSelector),document.addEventListener("keyup",this._handleEscCloseWrapper)}},{key:"close",value:function(){this._popup.classList.remove(this._openedSelector),document.removeEventListener("keyup",this._handleEscCloseWrapper)}},{key:"setEventListeners",value:function(){this._popup.addEventListener("click",this._handleMainCloseWrapper)}}])&&S(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(){return B="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=P(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},B.apply(this,arguments)}function P(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=T(e)););return e}function I(e,t){return I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},I(e,t)}function x(e,t){if(t&&("object"===L(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function T(e){return T=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},T(e)}var q=function(t){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&I(e,t)}(c,t);var n,r,o,i,a=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=T(o);if(i){var n=T(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return x(this,e)});function c(t,n,r){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(o=a.call(this,t))._popup=t,o._submitCallback=n,o._submitButton=o._popup.querySelector(".popup__container"),o._form=o._popup.querySelector(e.formSelector),o._inputSelector=e.inputSelector,o._closeCallback=r,o}return n=c,(r=[{key:"_getInputValues",value:function(){return Object.values(this._form).reduce((function(e,t){return e[t.name]=t.value,e}),{})}},{key:"setEventListeners",value:function(){var e=this;B(T(c.prototype),"setEventListeners",this).call(this),this._submitButton.addEventListener("submit",(function(t){t.preventDefault(),e._submitCallback(e._getInputValues(),t)}))}},{key:"close",value:function(){this._submitButton.removeEventListener("submit",this._submitCallback),B(T(c.prototype),"close",this).call(this),this._form.reset(),this._closeCallback()}}])&&j(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),c}(O);function R(e){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R(e)}function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(){return D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=A(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},D.apply(this,arguments)}function A(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=M(e)););return e}function N(e,t){return N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},N(e,t)}function V(e,t){if(t&&("object"===R(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function M(e){return M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},M(e)}var W=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&N(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=M(r);if(o){var n=M(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return V(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popup=e,t._lightboxCaption=t._popup.querySelector(".lightbox__caption"),t._lightboxImage=t._popup.querySelector(".lightbox__image"),t}return t=a,(n=[{key:"open",value:function(e){this._lightboxCaption.textContent=e.name,this._lightboxImage.src=e.link,this._lightboxImage.alt=e.name,D(M(a.prototype),"open",this).call(this)}}])&&U(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(O);function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var J=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userNameElement=t.name,this._userDescriptionElement=t.about,this._userAvatarElement=t.avatar}var t,n;return t=e,n=[{key:"getUserInfo",value:function(){return{name:this._userNameElement.textContent,about:this._userDescriptionElement.textContent}}},{key:"setUserInfo",value:function(e){this._userNameElement.textContent=e.name,this._userDescriptionElement.textContent=e.about,this.setUserAvatar(e.avatar)}},{key:"setUserAvatar",value:function(e){this._userAvatarElement.src=e}}],n&&F(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function $(e){return $="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$(e)}function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function z(){return z="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=G(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},z.apply(this,arguments)}function G(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=X(e)););return e}function K(e,t){return K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},K(e,t)}function Q(e,t){if(t&&("object"===$(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function X(e){return X=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},X(e)}var Y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&K(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=X(r);if(o){var n=X(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Q(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._popup=e,n._handleFormSubmit=t,n._form=n._popup.querySelector(".popup__container"),n._submitButton=n._form.querySelector(".popup__save-button"),n._element=null,n._obj=null,n}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;z(X(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._element,e._obj,t)}))}},{key:"open",value:function(e,t){this._element=e,this._obj=t,z(X(a.prototype),"open",this).call(this)}}])&&H(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(O),Z=new b({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-16",headers:{authorization:"25068d5b-79ef-423f-8b22-b9922c31ad6c","Content-Type":"application/json"}}),ee=new C({renderer:function(e){var t=ne(e).generateCard();ee.addItem(t)},containerElement:_});function te(e,t){e.target.querySelector(".popup__save-button").textContent=t}function ne(e){var t=new E({data:e,handleCardClick:function(e){ce.open(e)},handleLikeClick:function(){t.youLiked()?Z.removeLike(e).then((function(e){t.cardLikes=e.likes,t.renderAmountOfLikes(e.likes.length)})).then(t.toggleLikeBtnState()).catch((function(e){return console.log("Ошибка при удалении лайка: ".concat(e))})):Z.setLike(e).then((function(e){t.cardLikes=e.likes,t.renderAmountOfLikes(e.likes.length)})).then(t.toggleLikeBtnState()).catch((function(e){return console.log("Ошибка при добавлении лайка: ".concat(e))}))},handleDeleteIconClick:function(){re.open(t,e)},myId:"7f651893ffa284663c078177"},"#card");return t}var re=new Y(l,(function(e,t,n){te(n,"Удаление..."),Z.deleteCard(t).then(e.removeCard()).then((function(){re.close(),te(n,"Да")})).catch((function(e){return console.log("Ошибка при удалении карточки: ".concat(e))}))}));re.setEventListeners();var oe=new q(p,(function(e,t){te(t,"Сохранение..."),Z.setAvatar(e.link).then((function(e){ie.setUserAvatar(e.avatar)})).then((function(){oe.close(),te(t,"Сохранить")})).catch((function(e){return console.log("Ошибка при изменении аватара: ".concat(e))}))}),(function(){fe.removeErrors()}));oe.setEventListeners(),h.addEventListener("click",(function(){oe.open()}));var ie=new J(d),ae=new q(t,(function(e,t){te(t,"Сохранение..."),Z.setUser(e).then((function(e){ie.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})})).then((function(){ae.close(),te(t,"Сохранить")})).catch((function(e){return console.log("Ошибка при изменении данных профиля: ".concat(e))}))}),(function(){se.removeErrors()}));ae.setEventListeners(),r.addEventListener("click",(function(){var e=ie.getUserInfo(),t=e.name,n=e.about;i.value=t,a.value=n,ae.open()}));var ce=new W(y);ce.setEventListeners();var ue=new q(c,(function(e,t){te(t,"Добавление...");var n={name,link};n.name=e.title,n.link=e.link,Z.uploadCard(n).then((function(e){var t=ne(e).generateCard();ue.close(),ee.addItem(t)})).then((function(){te(t,"Сохранить")})).catch((function(e){return console.log("Ошибка при добавлении карточки: ".concat(e))}))}),(function(){le.removeErrors()}));ue.setEventListeners(),u.addEventListener("click",(function(){ue.open()})),Promise.all([Z.getUser(),Z.getCards()]).then((function(e){return console.log("Подключено к серверу и работает!"),{user:e[0],cards:e[1]}})).then((function(e){return ie.setUserInfo(e.user),e})).then((function(e){return e.cards.reverse()})).then((function(e){ee.render(e)})).catch((function(e){return console.log("Ошибка при попытке загрузить данные пользователя и карточки: ".concat(e))}));var se=new k(e,o);se.enableValidation();var le=new k(e,s);le.enableValidation();var fe=new k(e,f);fe.enableValidation()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,